* About
A set of tiny functions to keep the ~meson.build~ files for OpenBLAS in sync
with the corresponding ~Makefiles~.
** Why
For testing the constituent regular expressions and to keep a single notebook to
help construct paired build systems.
** Usage
The documentation consists of notebooks which can be taken as a rough chart of
porting away from ~Makefiles~ and ~CMake~.

While the library can be installed via ~pip~ and then used in scripts, that
would be rather odd at this point in its developement. The idea is to mostly
generate snippets and copy them into ~meson.build~ files by hand for now, later
these can form the basis of a templated system for automating updates further.

** Test generation
#+begin_src bash
pip install -e .
# For the generation
pip install numpy
python -m openblas_buildsys_snips.cli --generate
# Running
pip uninstall numpy
# Get it via the spin run $SHELL
# Run all
python -m openblas_buildsys_snips.cli --test all --filename tests.json.gz
# Run one
python -m openblas_buildsys_snips.cli --test ssyrk_lt --filename tests.json.gz
#+end_src
** Documentation
*** Readme
The ~readme~ can be constructed via:
#+begin_src bash
./scripts/org_to_md.sh readme_src.org readme.md
#+end_src
*** Sphinx and MyST Markdown
The markdown documentation is typically written with inline styles, but then
re-written to use reference styles via:

#+begin_src bash
pandoc --reference-links -f gfm $MDFILE -t gfm
#+end_src

These should also always be formatted using ~prettier~, for which a style file
is present in ~$GITROOT~.
*** Generate ~org~ to ~md~
#+begin_src bash
emacs --script ./scripts/clean_and_convert.el
#+end_src
* License
MIT.
